import json
import os

TODO_FILE = "todo_list.json"

def load_tasks():
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∑–∞–¥–∞—á–∏ –∏–∑ —Ñ–∞–π–ª–∞
    """
    if os.path.exists(TODO_FILE):
        try:
            with open(TODO_FILE, 'r', encoding='utf-8') as f:
                return json.load(f)
        except (json.JSONDecodeError, IOError) as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –∑–∞–¥–∞—á: {e}")
            return []
    return []

def save_tasks(tasks):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∑–∞–¥–∞—á–∏ –≤ —Ñ–∞–π–ª
    """
    try:
        with open(TODO_FILE, 'w', encoding='utf-8') as f:
            json.dump(tasks, f, ensure_ascii=False, indent=2)
    except IOError as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –∑–∞–¥–∞—á: {e}")
        raise

def add_task(task_text):
    """
    –î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
    """
    if not task_text or not task_text.strip():
        return "‚ùå –û—à–∏–±–∫–∞: –¢–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º"
    
    task_text = task_text.strip()
    
    try:
        tasks = load_tasks()
        task_id = len(tasks) + 1
        tasks.append({"id": task_id, "task": task_text, "completed": False})
        save_tasks(tasks)
        return f"‚úÖ –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞: {task_text}"
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏: {str(e)}"

def show_tasks():
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ –∑–∞–¥–∞—á–∏
    """
    tasks = load_tasks()
    if not tasks:
        return "–°–ø–∏—Å–æ–∫ –¥–µ–ª –ø—É—Å—Ç!"
    
    result = "üìã –í–∞—à —Å–ø–∏—Å–æ–∫ –¥–µ–ª:\n"
    for task in tasks:
        status = "‚úÖ" if task["completed"] else "‚≠ï"
        result += f"{task['id']}. {status} {task['task']}\n"
    return result

def complete_task(task_id):
    """
    –û—Ç–º–µ—á–∞–µ—Ç –∑–∞–¥–∞—á—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é
    """
    try:
        task_id = int(task_id)
        tasks = load_tasks()
        
        if not tasks:
            return "‚ùå –°–ø–∏—Å–æ–∫ –¥–µ–ª –ø—É—Å—Ç!"
        
        if 1 <= task_id <= len(tasks):
            if tasks[task_id-1]["completed"]:
                return f"‚ÑπÔ∏è –ó–∞–¥–∞—á–∞ {task_id} —É–∂–µ –±—ã–ª–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞"
            tasks[task_id-1]["completed"] = True
            save_tasks(tasks)
            return f"‚úÖ –ó–∞–¥–∞—á–∞ {task_id} –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è!"
        else:
            return f"‚ùå –û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏. –î–æ—Å—Ç—É–ø–Ω—ã –Ω–æ–º–µ—Ä–∞ –æ—Ç 1 –¥–æ {len(tasks)}"
    except ValueError:
        return "‚ùå –û—à–∏–±–∫–∞: –ù–æ–º–µ—Ä –∑–∞–¥–∞—á–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º"
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏: {str(e)}"

def delete_task(task_id):
    """
    –£–¥–∞–ª—è–µ—Ç –∑–∞–¥–∞—á—É
    """
    try:
        task_id = int(task_id)
        tasks = load_tasks()
        
        if not tasks:
            return "‚ùå –°–ø–∏—Å–æ–∫ –¥–µ–ª –ø—É—Å—Ç!"
        
        if 1 <= task_id <= len(tasks):
            deleted_task = tasks.pop(task_id-1)
            # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º ID –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –∑–∞–¥–∞—á
            for i, task in enumerate(tasks, 1):
                task["id"] = i
            save_tasks(tasks)
            return f"üóëÔ∏è –ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞: {deleted_task['task']}"
        else:
            return f"‚ùå –û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏. –î–æ—Å—Ç—É–ø–Ω—ã –Ω–æ–º–µ—Ä–∞ –æ—Ç 1 –¥–æ {len(tasks)}"
    except ValueError:
        return "‚ùå –û—à–∏–±–∫–∞: –ù–æ–º–µ—Ä –∑–∞–¥–∞—á–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º"
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏: {str(e)}"

def get_todo_stats():
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∑–∞–¥–∞—á–∞–º
    """
    try:
        tasks = load_tasks()
        
        if not tasks:
            return "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: –°–ø–∏—Å–æ–∫ –¥–µ–ª –ø—É—Å—Ç!"
        
        total_tasks = len(tasks)
        completed_tasks = sum(1 for task in tasks if task["completed"])
        pending_tasks = total_tasks - completed_tasks
        completion_rate = (completed_tasks / total_tasks * 100) if total_tasks > 0 else 0
        
        return (f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–ø–∏—Å–∫–∞ –¥–µ–ª:\n"
                f"üìù –í—Å–µ–≥–æ –∑–∞–¥–∞—á: {total_tasks}\n"
                f"‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {completed_tasks}\n"
                f"‚≠ï –û—Å—Ç–∞–ª–æ—Å—å: {pending_tasks}\n"
                f"üìà –ü—Ä–æ–≥—Ä–µ—Å—Å: {completion_rate:.1f}%")
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}"